#!/bin/bash
clear
echo "****************************************************************************************************************************"
# single master multi worker-node k3s cluster startup
echo "usage: addCluster <cluster-name> <number of worker notes> <number of master nodes> <multipass Ubuntu Version>"
echo "****************************************************************************************************************************"
echo Create a K3s-cluster with name k3s-$1 with $2 worker and $3 master nodes using $4 Version of Ubuntu
export CL_NAM=$1
export CLUSTER=k3s-$CL_NAM
export NUM_WORKERS=$2 
export NUM_MASTERS=$3 # number of masters will be ignored
export UBUNTU=$4
export MASTER=$CLUSTER-master-0
export WORKER=$CLUSTER-worker

echo "**************************************************************************************************************************** launch master"
multipass launch $UBUNTU --name $MASTER --cpus 1 --disk 3G --mem 1G -v

echo "**************************************************************************************************************************** update master"
multipass exec $MASTER sudo apt-get update

echo "**************************************************************************************************************************** upgrade master"
multipass exec $MASTER -- /bin/bash -c "sudo apt-get upgrade --assume-yes"
multipass exec $MASTER sudo apt install sshfs
# multipass exec $MASTER sudo snap install multipass-sshfs # Ubuntu >= 20.04 only

echo "**************************************************************************************************************************** mount master"
mkdir -p store
mkdir -p store/$MASTER
multipass mount -v -u 502:1000 -g 20:1000 store/$MASTER $MASTER:/Users/Ubuntu

echo "**************************************************************************************************************************** launch worker"
for ((CNT=0; CNT<$NUM_WORKERS; CNT+=1)); do
	multipass launch $UBUNTU --name $WORKER-$CNT --cpus 1 --disk 3G --mem 1G -v
done

echo "**************************************************************************************************************************** info master"
multipass info $MASTER

echo "**************************************************************************************************************************** install k3s on master"
# Get the IP of the master node
export K3S_NODEIP_MASTER="https://$(multipass info $CLUSTER-master-0 | grep "IPv4" | awk -F' ' '{print $2}'):6443"
echo K3S_NODEIP_MASTER $K3S_NODEIP_MASTER
# Deploy k3s on the master node
multipass exec $MASTER -- /bin/bash -c "curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644"
# Get the TOKEN from the master node
K3S_TOKEN="$(multipass exec $MASTER -- /bin/bash -c "sudo cat /var/lib/rancher/k3s/server/node-token")"

echo "**************************************************************************************************************************** update workers"
for ((CNT=0; CNT<$NUM_WORKERS; CNT+=1)); do
	multipass exec $WORKER-$CNT sudo apt-get update
	multipass exec $WORKER-$CNT -- /bin/bash -c "sudo apt-get upgrade --assume-yes"
	echo "**************************************************************************************************************************** $WORKER-$CNT upgraded"
done

echo "**************************************************************************************************************************** mount workers"
for ((CNT=0; CNT<$NUM_WORKERS; CNT+=1)); do
	multipass exec $WORKER-$CNT sudo apt install sshfs
#    multipass exec $WORKER-$CNT sudo snap install multipass-sshfs # Ubuntu >= 20.04 only
	mkdir -p store/$WORKER-$CNT
	multipass mount -v -u 502:1000 -g 20:1000 store/$WORKER-$CNT $WORKER-$CNT:/Users/Ubuntu
	echo "**************************************************************************************************************************** worker $CNT mounted"
done

echo "**************************************************************************************************************************** multipass info worker"
for ((CNT=0; CNT<$NUM_WORKERS; CNT+=1)); do
	multipass info $WORKER-$CNT
	echo "****************************************************************************************************************************"
done

echo "**************************************************************************************************************************** deploy k3s on workers"
for ((CNT=0; CNT<$NUM_WORKERS; CNT+=1)); do
	# Deploy k3s on the worker node
	multipass exec $WORKER-$CNT -- /bin/bash -c "curl -sfL https://get.k3s.io | K3S_TOKEN=${K3S_TOKEN} K3S_URL=${K3S_NODEIP_MASTER} sh -"
	echo "**************************************************************************************************************************** k3s deployed on worker $CNT"
done

sleep 10
echo "**************************************************************************************************************************** label worker-nodes"
multipass exec $MASTER -- /bin/bash -c "export KUBECONFIG=~/.kube/config:/etc/rancher/k3s/k3s.yaml"

for ((CNT=0; CNT<$NUM_WORKERS; CNT+=1)); do
	multipass exec $MASTER -- /bin/bash -c "sudo kubectl label nodes ${WORKER}-${CNT} node-role.kubernetes.io/worker=worker"
done

# Configure taint NoSchedule for the master node
echo "**************************************************************************************************************************** taint master"
multipass exec $MASTER -- /bin/bash -c "kubectl --kubeconfig=/etc/rancher/k3s/k3s.yaml taint node ${MASTER} node-role.kubernetes.io/master=effect:NoSchedule"

echo "**************************************************************************************************************************** multipass list"
multipass list
sleep 10

echo "**************************************************************************************************************************** kubectl get nodes"
multipass exec $MASTER -- /bin/bash -c "sudo kubectl get nodes"
multipass exec $MASTER -- /bin/bash -c "sudo kubectl get pods --all-namespaces"
./getKubeconfig $CL_NAM
kubectl cluster-info
echo "**************************************************************************************************************************** cluster $CLUSTER completed"
